AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with public subnet and Internet Gateway

Parameters:
# 2.1. AMI ID for EC2 instance - use public parameter store
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
# End of 2.1
  Vpc3Cidr:
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Default: 21.0.0.0/16
  Vpc3Subnet1Cidr:
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Default: 21.0.1.0/24


Resources:

  Instance1Vpc3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref Vpc3PublicSubnet1
      SecurityGroupIds:
        - !Ref Sg1Vpc3
      IamInstanceProfile: ManagedBySSM-InstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash

          sudo su
          yum update -y
          yum install httpd -y
          yum install -y jq

          echo "<html><h1> Welcome to my lab server</h1><html>" >> /var/www/html/index.html
          echo "<html><h2> Instance ID: `curl http://169.254.169.254/latest/meta-data/instance-id`</h2><html>"   >> /var/www/html/index.html
          echo "<html><h2> Region: `curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region` </h2><html>" >> /var/www/html/index.html

          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: Instance 1 in VPC3


###########
# VPC with Internet Gateway
###########

  Vpc3:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc3Cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC 3

  Vpc3Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW 3

  VPC3toIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Vpc3Igw
      VpcId: !Ref Vpc3

###########
# Public Route Table
###########

  Vpc3PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc3
      Tags:
        - Key: Name
          Value: Public Route Table of VPC 3
  Vpc3PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Vpc3Igw
      RouteTableId: !Ref Vpc3PublicRT



###########
# Public Subnet
###########

  Vpc3PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc3
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Vpc3Subnet1Cidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1 of VPC 3

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc3PublicRT
      SubnetId: !Ref Vpc3PublicSubnet1


###########
# App Security Group
###########

  Sg1Vpc3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG 1 in VPC 3
      GroupDescription: Enable http access to instance
      VpcId: !Ref Vpc3
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG 1 in VPC 3


###########
# Outputs
###########

Outputs:
  DNSnameInstance1Vpc3:
    Value: !Sub ${Instance1Vpc3.PublicDnsName}
